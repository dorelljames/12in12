---
import Layout from "../layouts/Layout.astro";
import { supabase } from "../lib/supabase";
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";
import ShareUpdateModal from "../components/ShareUpdateModal.astro";
import ProjectModal from "../components/ProjectModal.astro";

// Get username from URL params
const { username } = Astro.params;

// Get cookies
const accessToken = Astro.cookies.get("sb-access-token")?.value;
const refreshToken = Astro.cookies.get("sb-refresh-token")?.value;

// Set session if we have tokens
let user = null;
if (accessToken && refreshToken) {
  const {
    data: { user: sessionUser },
  } = await supabase.auth.setSession({
    access_token: accessToken,
    refresh_token: refreshToken,
  });
  user = sessionUser;
}

// Fetch user profile
const { data: profile, error: profileError } = await supabase
  .from("profiles")
  .select("*")
  .eq("username", username)
  .single();

// Redirect to signin if profile doesn't exist
if (!profile) {
  return Astro.redirect("/signin");
}

const isOwned = user && user.id === profile.user_id;

// Fetch products
const { data: products, error: productsError } = await supabase
  .from("products")
  .select("*")
  .eq("profile_id", profile?.id)
  .order("created_at", { ascending: false });

// Create array of 12 months with existing products or empty slots
const months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

type ProductStatus = "completed" | "in_progress" | "not_started";

interface Product {
  id?: string;
  title?: string;
  description?: string;
  month?: string;
  status?: ProductStatus;
  github_url?: string;
  demo_url?: string;
  tech_stack?: string[];
  lessons_learned?: string;
  thumbnail_url?: string;
}

const productGrid: Product[] = months.map((month, index) => {
  const product = products?.find((p: any) => p.month === month) || {
    month,
    title: `Product ${index + 1}`,
    description: "",
    status: "not_started" as ProductStatus,
  };
  return product;
});

const getStatusConfig = (status: ProductStatus = "not_started") => {
  const configs = {
    completed: {
      dotColor: "bg-emerald-500",
      textColor: "text-emerald-600",
      label: "Completed",
    },
    in_progress: {
      dotColor: "bg-amber-500",
      textColor: "text-amber-600",
      label: "In Progress",
    },
    not_started: {
      dotColor: "bg-gray-300",
      textColor: "text-gray-400",
      label: "Not Started",
    },
  };
  return configs[status];
};

// Add these new calculations
const completedCount = productGrid.filter(
  (p) => p.status === "completed"
).length;
const inProgressCount = productGrid.filter(
  (p) => p.status === "in_progress"
).length;
const currentMonth = new Date().toLocaleString("default", { month: "long" });

// Add streak calculation
const getCurrentStreak = (products: Product[]) => {
  let streak = 0;
  const today = new Date();
  const currentMonth = today.getMonth();

  for (let i = currentMonth; i >= 0; i--) {
    const monthProduct = products?.find((p) => p.month === months[i]);
    if (
      monthProduct &&
      (monthProduct.status === "completed" ||
        monthProduct.status === "in_progress")
    ) {
      streak++;
    } else {
      break;
    }
  }
  return streak;
};

const streak = getCurrentStreak(productGrid);

// Add new types
interface Update {
  id: string;
  content: string;
  type: "milestone" | "progress" | "launch" | "learning";
  created_at: string;
  product_id?: string;
  products?: {
    title: string;
    month: string;
  };
}

// Add new query for updates
const { data: updates, error: updatesError } = await supabase
  .from("product_updates")
  .select(
    `
    *,
    products (
      title,
      month
    )
  `
  )
  .eq("profile_id", profile?.id)
  .order("created_at", { ascending: false })
  .limit(10);

// Add new types
interface SocialLink {
  id: string;
  user_id: string;
  platform: "website" | "github" | "twitter" | "custom";
  url: string;
  title?: string;
  created_at: string;
  updated_at: string;
}

// Add new query for social links
const { data: socialLinks, error: socialLinksError } = await supabase
  .from("social_links")
  .select("*")
  .eq("user_id", profile?.id)
  .order("platform");

// Add this before the Layout component
let editingUpdate: Update | undefined;
---

<Layout title={`${username}'s Builder Journey`}>
  <Navbar />
  {
    isOwned && (
      <ShareUpdateModal profileId={profile.id} products={products || []} />
    )
  }
  {isOwned && <ProjectModal profileId={profile.id} month="" />}
  <main class="min-h-screen bg-gray-50">
    {/* Hero Section */}
    <div class="bg-white border-b border-gray-100">
      <div class="container mx-auto px-4 py-16 mt-24">
        <div class="max-w-4xl mx-auto">
          <div class="flex items-start justify-between mb-8">
            <div>
              <h1 class="text-4xl font-bold text-gray-900 mb-4">
                {profile?.full_name || username}'s Builder Journey
              </h1>
              <p class="text-lg text-gray-600 mb-6">
                {profile?.bio || "Building in public • One product a month"}
              </p>

              {/* Social Links */}
              <div class="flex items-center gap-4 text-gray-500">
                {
                  socialLinks?.map((link: SocialLink) => {
                    type IconsType = {
                      [K in SocialLink["platform"]]: astroHTML.JSX.Element;
                    };

                    const icons: IconsType = {
                      website: (
                        <svg
                          class="w-5 h-5"
                          viewBox="0 0 24 24"
                          fill="currentColor"
                        >
                          <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm1 16.057v-3.05c2.837.183 4.704 1.179 5.904 2.317-1.297 1.291-3.569 2.14-5.904 2.317v3.05A9.09 9.09 0 0112 16.92a9.09 9.09 0 01-1-6.863A9.09 9.09 0 0112 3.196a9.09 9.09 0 011 6.863A9.09 9.09 0 0112 16.92z" />
                        </svg>
                      ),
                      github: (
                        <svg
                          class="w-5 h-5"
                          viewBox="0 0 24 24"
                          fill="currentColor"
                        >
                          <path d="M12 0C5.37 0 0 5.37 0 12c0 5.31 3.435 9.795 8.205 11.385.6.105.825-.255.825-.57 0-.285-.015-1.23-.015-2.235-3.015.555-3.795-.735-4.035-1.41-.135-.345-.72-1.41-1.23-1.695-.42-.225-1.02-.78-.015-.795.945-.015 1.62.87 1.845 1.23 1.08 1.815 2.805 1.305 3.495.99.105-.78.42-1.305.765-1.605-2.67-.3-5.46-1.335-5.46-5.925 0-1.305.465-2.385 1.23-3.225-.12-.3-.54-1.53.12-3.18 0 0 1.005-.315 3.3 1.23.96-.27 1.98-.405 3-.405s2.04.135 3 .405c2.295-1.56 3.3-1.23 3.3-1.23.66 1.65.24 2.88.12 3.18.765.84 1.23 1.905 1.23 3.225 0 4.605-2.805 5.625-5.475 5.925.435.375.81 1.095.81 2.22 0 1.605-.015 2.895-.015 3.3 0 .315.225.69.825.57A12.02 12.02 0 0024 12c0-6.63-5.37-12-12-12z" />
                        </svg>
                      ),
                      twitter: (
                        <svg
                          class="w-5 h-5"
                          viewBox="0 0 24 24"
                          fill="currentColor"
                        >
                          <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z" />
                        </svg>
                      ),
                      custom: (
                        <svg
                          class="w-5 h-5"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          stroke-width="2"
                        >
                          <path d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                        </svg>
                      ),
                    };

                    return (
                      <a
                        href={link.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="hover:text-gray-900 transition-colors"
                        title={link.title || link.platform}
                      >
                        {icons[link.platform]}
                      </a>
                    );
                  })
                }
              </div>
            </div>
            {
              profile?.avatar_url && (
                <img
                  src={profile.avatar_url}
                  alt={username}
                  class="w-24 h-24 rounded-full border-4 border-white shadow-lg"
                />
              )
            }
          </div>

          {/* Quick Stats */}
          <div class="grid grid-cols-4 gap-6 mb-8">
            <div class="bg-emerald-50 rounded-xl p-4 text-center">
              <div class="text-3xl font-bold text-emerald-600 mb-1">
                {completedCount}
              </div>
              <div class="text-sm font-medium text-emerald-900">Shipped</div>
            </div>
            <div class="bg-amber-50 rounded-xl p-4 text-center">
              <div class="text-3xl font-bold text-amber-600 mb-1">
                {inProgressCount}
              </div>
              <div class="text-sm font-medium text-amber-900">Building</div>
            </div>
            <div class="bg-purple-50 rounded-xl p-4 text-center">
              <div class="text-3xl font-bold text-purple-600 mb-1">
                {streak}
              </div>
              <div class="text-sm font-medium text-purple-900">
                Month Streak
              </div>
            </div>
            <div class="bg-blue-50 rounded-xl p-4 text-center">
              <div class="text-3xl font-bold text-blue-600 mb-1">
                {
                  productGrid.reduce(
                    (acc, product) => acc + (product.github_url ? 1 : 0),
                    0
                  )
                }
              </div>
              <div class="text-sm font-medium text-blue-900">Open Source</div>
            </div>
          </div>

          {/* Timeline Progress */}
          <div
            class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-8"
          >
            <div class="flex items-center justify-between mb-4">
              <h3 class="font-semibold text-gray-900">2025 Progress</h3>
              <span class="text-sm text-gray-500">Current: {currentMonth}</span>
            </div>
            <div class="grid grid-cols-12 gap-2">
              {
                months.map((month, index) => {
                  const product = productGrid[index];
                  const isCurrent = month === currentMonth;
                  return (
                    <button
                      type="button"
                      class={`
                        relative h-2 rounded-full transition-all duration-300 cursor-pointer
                        ${
                          product.status === "completed"
                            ? "bg-emerald-500"
                            : product.status === "in_progress"
                              ? "bg-amber-500"
                              : "bg-gray-200"
                        }
                        ${isCurrent ? "ring-2 ring-offset-2 ring-emerald-500" : ""}
                        ${isOwned ? "hover:opacity-80" : "cursor-default"}
                      `}
                      title={`${month}: ${product.status || "Not Started"}`}
                      data-project={JSON.stringify({
                        ...product,
                        month,
                      })}
                    />
                  );
                })
              }
            </div>
          </div>
        </div>
      </div>
    </div>

    {/* Latest Updates Section - Redesigned */}
    <div class="container mx-auto px-4 py-12">
      <div class="max-w-4xl mx-auto">
        {/* Header with Action */}
        <div class="flex justify-between items-center mb-8">
          <div>
            <h2 class="text-2xl font-bold text-gray-900">Latest Updates</h2>
          </div>
          {
            isOwned && (
              <button
                id="shareUpdateButton"
                class="inline-flex items-center px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors text-sm"
              >
                <svg
                  class="w-4 h-4 mr-2"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 4v16m8-8H4"
                  />
                </svg>
                Share Update
              </button>
            )
          }
        </div>

        {/* Updates List */}
        <div class="space-y-4">
          {
            updates?.map((update: Update) => (
              <div class="bg-white rounded-lg border border-gray-100 p-4 hover:shadow-sm transition-shadow">
                <div class="flex items-center justify-between mb-2">
                  <div class="flex items-center gap-2">
                    <span
                      class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                    ${
                      update.type === "milestone"
                        ? "bg-purple-50 text-purple-700"
                        : update.type === "progress"
                          ? "bg-blue-50 text-blue-700"
                          : update.type === "launch"
                            ? "bg-emerald-50 text-emerald-700"
                            : "bg-amber-50 text-amber-700"
                    }`}
                    >
                      {update.type === "milestone"
                        ? "🏆"
                        : update.type === "progress"
                          ? "📈"
                          : update.type === "launch"
                            ? "🚀"
                            : "💡"}{" "}
                      {update.type.charAt(0).toUpperCase() +
                        update.type.slice(1)}
                    </span>
                    {update.product_id && (
                      <>
                        <span class="text-gray-300">•</span>
                        <span class="text-sm text-gray-600">
                          {update.products?.title}
                        </span>
                      </>
                    )}
                  </div>
                  <div class="flex items-center gap-3">
                    <time class="text-sm text-gray-500">
                      {new Date(update.created_at).toLocaleDateString("en-US", {
                        month: "short",
                        day: "numeric",
                      })}
                    </time>
                    {isOwned && (
                      <button
                        type="button"
                        class="text-gray-400 hover:text-gray-600"
                        onclick={`window.showEditModal(${JSON.stringify({
                          id: update.id,
                          type: update.type,
                          content: update.content,
                          product_id: update.product_id,
                        })})`}
                      >
                        <svg
                          class="w-4 h-4"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"
                          />
                        </svg>
                      </button>
                    )}
                  </div>
                </div>
                <p class="text-gray-700 text-sm whitespace-pre-wrap">
                  {update.content}
                </p>
              </div>
            ))
          }
        </div>

        {/* Load More */}
        {
          (updates?.length ?? 0) >= 10 && (
            <div class="text-center mt-8">
              <button class="text-sm text-gray-500 hover:text-gray-700">
                Load More Updates
              </button>
            </div>
          )
        }
      </div>
    </div>

    {/* Products Grid */}
    <div class="bg-white py-12 border-t border-gray-100">
      <div class="container mx-auto px-4">
        <h2 class="text-2xl font-bold text-gray-900 mb-8">Products Timeline</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {
            productGrid.map((product) => {
              const status =
                product.status || (product.id ? "completed" : "not_started");
              const isActive = status !== "not_started";
              const isCurrentMonth = product.month === currentMonth;

              return (
                <div
                  class={`
                    group bg-white rounded-xl overflow-hidden transition-all duration-300
                    ${isActive ? "hover:shadow-xl" : "opacity-75"}
                    ${isCurrentMonth ? "ring-2 ring-emerald-500" : ""}
                    border border-gray-100
                    ${isOwned ? "cursor-pointer" : ""}
                  `}
                  data-project={
                    isOwned
                      ? JSON.stringify({
                          ...product,
                          month: product.month,
                        })
                      : undefined
                  }
                >
                  {/* Thumbnail or Placeholder */}
                  <div class="relative aspect-video bg-gray-100">
                    {product.thumbnail_url ? (
                      <img
                        src={product.thumbnail_url}
                        alt={product.title}
                        class="w-full h-full object-cover"
                        loading="lazy"
                        onerror="this.onerror=null; this.src='https://placehold.co/600x400/e5e7eb/94a3b8?text=No+Image'"
                      />
                    ) : (
                      <div class="absolute inset-0 flex items-center justify-center">
                        <span class="text-gray-400 flex flex-col items-center gap-2">
                          {status === "not_started" ? (
                            <>
                              <span class="text-2xl">🚀</span>
                              <span class="text-sm">Coming Soon</span>
                            </>
                          ) : (
                            <>
                              <span class="text-2xl">🏗️</span>
                              <span class="text-sm">Building</span>
                            </>
                          )}
                        </span>
                      </div>
                    )}
                    <div class="absolute top-4 right-4 flex gap-2">
                      <span
                        class={`
                          px-2.5 py-1 rounded-full text-xs font-medium backdrop-blur-md
                          ${
                            isCurrentMonth
                              ? "bg-emerald-100/90 text-emerald-700"
                              : isActive
                                ? "bg-emerald-50/90 text-emerald-600"
                                : "bg-gray-50/90 text-gray-500"
                          }
                        `}
                      >
                        {product.month}
                      </span>
                      {isOwned && (
                        <button
                          type="button"
                          class="p-1 bg-white/90 backdrop-blur-md rounded-full text-gray-400 hover:text-gray-600 shadow-sm hover:shadow transition-all"
                          title="Edit Project"
                          data-project={JSON.stringify({
                            ...product,
                            month: product.month,
                          })}
                        >
                          <svg
                            class="w-4 h-4"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"
                            />
                          </svg>
                        </button>
                      )}
                    </div>
                  </div>

                  <div class="p-6">
                    {/* Status Badge */}
                    <div class="flex items-center gap-2 mb-4">
                      <div
                        class={`w-2 h-2 rounded-full ${getStatusConfig(status).dotColor}`}
                      />
                      <span
                        class={`text-xs ${getStatusConfig(status).textColor} font-medium`}
                      >
                        {getStatusConfig(status).label}
                      </span>
                    </div>

                    {/* Title and Description */}
                    <h3
                      class={`
                        text-xl font-semibold mb-2 transition-colors line-clamp-2
                        ${isActive ? "text-gray-900" : "text-gray-400"}
                      `}
                    >
                      {product.title}
                    </h3>
                    {product.description && (
                      <p class="text-gray-600 text-sm mb-4 line-clamp-3">
                        {product.description}
                      </p>
                    )}

                    {/* Tech Stack Tags */}
                    {product.tech_stack && product.tech_stack.length > 0 && (
                      <div class="flex flex-wrap gap-2 mb-4">
                        {product.tech_stack.map((tech) => (
                          <span class="px-2 py-1 bg-gray-100 text-gray-600 rounded text-xs">
                            {tech}
                          </span>
                        ))}
                      </div>
                    )}

                    {/* Action Links */}
                    <div class="flex flex-wrap items-center gap-3 mt-4">
                      {status === "completed" && (
                        <>
                          <a
                            href={`/projects/${product.id}`}
                            class="inline-flex items-center text-sm font-medium text-emerald-600 hover:text-emerald-700"
                          >
                            View Details
                            <svg
                              class="w-4 h-4 ml-1"
                              viewBox="0 0 20 20"
                              fill="currentColor"
                            >
                              <path
                                fill-rule="evenodd"
                                d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                                clip-rule="evenodd"
                              />
                            </svg>
                          </a>
                          {product.github_url && (
                            <a
                              href={product.github_url}
                              target="_blank"
                              rel="noopener noreferrer"
                              class="inline-flex items-center text-sm text-gray-500 hover:text-gray-700"
                            >
                              <svg
                                class="w-4 h-4 mr-1"
                                viewBox="0 0 24 24"
                                fill="currentColor"
                              >
                                <path d="M12 0C5.37 0 0 5.37 0 12c0 5.31 3.435 9.795 8.205 11.385.6.105.825-.255.825-.57 0-.285-.015-1.23-.015-2.235-3.015.555-3.795-.735-4.035-1.41-.135-.345-.72-1.41-1.23-1.695-.42-.225-1.02-.78-.015-.795.945-.015 1.62.87 1.845 1.23 1.08 1.815 2.805 1.305 3.495.99.105-.78.42-1.305.765-1.605-2.67-.3-5.46-1.335-5.46-5.925 0-1.305.465-2.385 1.23-3.225-.12-.3-.54-1.53.12-3.18 0 0 1.005-.315 3.3 1.23.96-.27 1.98-.405 3-.405s2.04.135 3 .405c2.295-1.56 3.3-1.23 3.3-1.23.66 1.65.24 2.88.12 3.18.765.84 1.23 1.905 1.23 3.225 0 4.605-2.805 5.625-5.475 5.925.435.375.81 1.095.81 2.22 0 1.605-.015 2.895-.015 3.3 0 .315.225.69.825.57A12.02 12.02 0 0024 12c0-6.63-5.37-12-12-12z" />
                              </svg>
                              Code
                            </a>
                          )}
                          {product.demo_url && (
                            <a
                              href={product.demo_url}
                              target="_blank"
                              rel="noopener noreferrer"
                              class="inline-flex items-center text-sm text-gray-500 hover:text-gray-700"
                            >
                              <svg
                                class="w-4 h-4 mr-1"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                              >
                                <path
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                                />
                                <path
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                                />
                              </svg>
                              Demo
                            </a>
                          )}
                        </>
                      )}
                      {status === "in_progress" && (
                        <span class="inline-flex items-center text-sm font-medium text-amber-600">
                          <svg
                            class="w-4 h-4 mr-1.5 animate-spin"
                            viewBox="0 0 24 24"
                            fill="none"
                          >
                            <circle
                              class="opacity-25"
                              cx="12"
                              cy="12"
                              r="10"
                              stroke="currentColor"
                              stroke-width="4"
                            />
                            <path
                              class="opacity-75"
                              fill="currentColor"
                              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                            />
                          </svg>
                          Building
                        </span>
                      )}
                    </div>

                    {/* Lessons Learned - Only show for completed projects */}
                    {status === "completed" && product.lessons_learned && (
                      <div class="mt-4 pt-4 border-t border-gray-100">
                        <h4 class="text-sm font-medium text-gray-900 mb-2">
                          Lessons Learned
                        </h4>
                        <p class="text-sm text-gray-600 italic line-clamp-3">
                          "{product.lessons_learned}"
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              );
            })
          }
        </div>
      </div>
    </div>
  </main>
  <Footer />
</Layout>

<script>
  // Initialize modal functionality
  document.addEventListener("DOMContentLoaded", () => {
    const shareButton = document.getElementById("shareUpdateButton");
    const modal = document.getElementById("shareUpdateModal");

    if (shareButton && modal) {
      shareButton.addEventListener("click", () => {
        modal.classList.remove("hidden");
      });
    }

    // Add click handlers for project buttons in timeline
    document.querySelectorAll("button[data-project]").forEach((button) => {
      button.addEventListener("click", (e) => {
        e.stopPropagation(); // Prevent triggering parent card click
        const target = e.currentTarget as HTMLButtonElement;
        const projectData = JSON.parse(target.dataset.project || "{}");
        // @ts-ignore
        window.showProjectModal?.(projectData);
      });
    });

    // Add click handlers for project cards
    document.querySelectorAll("div[data-project]").forEach((card) => {
      card.addEventListener("click", (e) => {
        const target = e.currentTarget as HTMLDivElement;
        const projectData = JSON.parse(target.dataset.project || "{}");
        // @ts-ignore
        window.showProjectModal?.(projectData);
      });
    });
  });
</script>
