---
import Layout from "../layouts/Layout.astro";
import { createClient } from "@supabase/supabase-js";
import Navbar from "../components/Navbar.astro";
import Footer from "../components/Footer.astro";

// Get username from URL params
const { username } = Astro.params;

// Initialize Supabase client
const supabase = createClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY
);

// Get current logged in user
const {
  data: { user },
} = await supabase.auth.getUser();

// Fetch user profile
const { data: profile, error: profileError } = await supabase
  .from("profiles")
  .select("*")
  .eq("username", username)
  .single();

// Fetch products
const { data: products, error: productsError } = await supabase
  .from("products")
  .select("*")
  .eq("profile_id", profile?.id)
  .order("created_at", { ascending: false });

// Create array of 12 months with existing products or empty slots
const months = [
  "January",
  "February",
  "March",
  "April",
  "May",
  "June",
  "July",
  "August",
  "September",
  "October",
  "November",
  "December",
];

type ProductStatus = "completed" | "in_progress" | "not_started";

interface Product {
  id?: string;
  title?: string;
  description?: string;
  month?: string;
  status?: ProductStatus;
  github_url?: string;
  demo_url?: string;
  tech_stack?: string[];
  lessons_learned?: string;
  thumbnail_url?: string;
}

const productGrid: Product[] = months.map((month, index) => {
  const product = products?.find((p: any) => p.month === month) || {
    month,
    title: `Product ${index + 1}`,
    description: "",
    status: "not_started" as ProductStatus,
  };
  return product;
});

const getStatusConfig = (status: ProductStatus = "not_started") => {
  const configs = {
    completed: {
      dotColor: "bg-emerald-500",
      textColor: "text-emerald-600",
      label: "Completed",
    },
    in_progress: {
      dotColor: "bg-amber-500",
      textColor: "text-amber-600",
      label: "In Progress",
    },
    not_started: {
      dotColor: "bg-gray-300",
      textColor: "text-gray-400",
      label: "Not Started",
    },
  };
  return configs[status];
};

// Add these new calculations
const completedCount = productGrid.filter(
  (p) => p.status === "completed"
).length;
const inProgressCount = productGrid.filter(
  (p) => p.status === "in_progress"
).length;
const currentMonth = new Date().toLocaleString("default", { month: "long" });

// Add streak calculation
const getCurrentStreak = (products: Product[]) => {
  let streak = 0;
  const today = new Date();
  const currentMonth = today.getMonth();

  for (let i = currentMonth; i >= 0; i--) {
    const monthProduct = products?.find((p) => p.month === months[i]);
    if (
      monthProduct &&
      (monthProduct.status === "completed" ||
        monthProduct.status === "in_progress")
    ) {
      streak++;
    } else {
      break;
    }
  }
  return streak;
};

const streak = getCurrentStreak(productGrid);

// Add new types
interface Update {
  id: string;
  content: string;
  type: "milestone" | "progress" | "launch" | "learning";
  created_at: string;
  product_id?: string;
}

// Add new query for updates
const { data: updates, error: updatesError } = await supabase
  .from("product_updates")
  .select(
    `
    *,
    products (
      title,
      month
    )
  `
  )
  .eq("profile_id", profile?.id)
  .order("created_at", { ascending: false })
  .limit(10);
console.log("🚀 ~ updates:", updates);
---

<Layout title={`${username}'s Builder Journey`}>
  <Navbar />
  <main class="min-h-screen bg-gray-50">
    {/* Hero Section */}
    <div class="bg-white border-b border-gray-100">
      <div class="container mx-auto px-4 py-16 mt-24">
        <div class="max-w-4xl mx-auto">
          <div class="flex items-start justify-between mb-8">
            <div>
              <h1 class="text-4xl font-bold text-gray-900 mb-4">
                {profile?.full_name || username}'s Builder Journey
              </h1>
              <p class="text-lg text-gray-600 mb-6">
                Building in public • One product every month
              </p>
              {
                profile?.bio && (
                  <p class="text-gray-600 max-w-2xl">{profile.bio}</p>
                )
              }
            </div>
            {
              profile?.avatar_url && (
                <img
                  src={profile.avatar_url}
                  alt={username}
                  class="w-24 h-24 rounded-full border-4 border-white shadow-lg"
                />
              )
            }
          </div>

          {/* Quick Stats */}
          <div class="grid grid-cols-4 gap-6 mb-8">
            <div class="bg-emerald-50 rounded-xl p-4 text-center">
              <div class="text-3xl font-bold text-emerald-600 mb-1">
                {completedCount}
              </div>
              <div class="text-sm font-medium text-emerald-900">Shipped</div>
            </div>
            <div class="bg-amber-50 rounded-xl p-4 text-center">
              <div class="text-3xl font-bold text-amber-600 mb-1">
                {inProgressCount}
              </div>
              <div class="text-sm font-medium text-amber-900">Building</div>
            </div>
            <div class="bg-purple-50 rounded-xl p-4 text-center">
              <div class="text-3xl font-bold text-purple-600 mb-1">
                {streak}
              </div>
              <div class="text-sm font-medium text-purple-900">
                Month Streak
              </div>
            </div>
            <div class="bg-blue-50 rounded-xl p-4 text-center">
              <div class="text-3xl font-bold text-blue-600 mb-1">
                {
                  productGrid.reduce(
                    (acc, product) => acc + (product.github_url ? 1 : 0),
                    0
                  )
                }
              </div>
              <div class="text-sm font-medium text-blue-900">Open Source</div>
            </div>
          </div>

          {/* Timeline Progress */}
          <div
            class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-8"
          >
            <div class="flex items-center justify-between mb-4">
              <h3 class="font-semibold text-gray-900">2025 Progress</h3>
              <span class="text-sm text-gray-500">Current: {currentMonth}</span>
            </div>
            <div class="grid grid-cols-12 gap-2">
              {
                months.map((month, index) => {
                  const product = productGrid[index];
                  const isCurrent = month === currentMonth;
                  return (
                    <div
                      class={`
                      h-2 rounded-full transition-all duration-300
                      ${
                        product.status === "completed"
                          ? "bg-emerald-500"
                          : product.status === "in_progress"
                            ? "bg-amber-500"
                            : "bg-gray-200"
                      }
                      ${isCurrent ? "ring-2 ring-offset-2 ring-emerald-500" : ""}
                    `}
                      title={`${month}: ${product.status || "Not Started"}`}
                    />
                  );
                })
              }
            </div>
          </div>
        </div>
      </div>
    </div>

    {/* Latest Updates Section - Redesigned */}
    <div class="container mx-auto px-4 py-12">
      <div class="max-w-4xl mx-auto">
        {/* Header with Action */}
        <div class="flex justify-between items-center mb-12">
          <div>
            <h2 class="text-3xl font-bold text-gray-900 mb-2">Builder's Log</h2>
            <p class="text-gray-600">Follow my journey as I build in public</p>
          </div>
          {
            user && profile?.id === 1 && (
              <button class="inline-flex items-center px-5 py-2.5 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors shadow-sm">
                <svg
                  class="w-4 h-4 mr-2"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M12 4v16m8-8H4"
                  />
                </svg>
                Share Update
              </button>
            )
          }
        </div>

        {/* Updates Timeline */}
        <div class="relative">
          {/* Timeline Line */}
          <div class="absolute left-8 top-0 bottom-0 w-px bg-gray-200"></div>

          {/* Updates */}
          <div class="space-y-12">
            {
              updates?.map((update) => (
                <div class="relative">
                  {/* Timeline Dot */}
                  <div
                    class={`
                    absolute left-8 -translate-x-1/2 w-4 h-4 rounded-full border-2 border-white
                    ${
                      update.type === "milestone"
                        ? "bg-purple-500"
                        : update.type === "progress"
                          ? "bg-blue-500"
                          : update.type === "launch"
                            ? "bg-emerald-500"
                            : "bg-amber-500"
                    }
                  `}
                  />

                  {/* Update Card */}
                  <div class="ml-16 bg-white rounded-xl shadow-sm hover:shadow-md transition-shadow border border-gray-100">
                    {/* Card Header */}
                    <div class="p-6 border-b border-gray-100">
                      <div class="flex items-center justify-between mb-4">
                        {/* Type Badge */}
                        <div
                          class={`
                          inline-flex items-center px-3 py-1 rounded-full text-xs font-medium
                          ${
                            update.type === "milestone"
                              ? "bg-purple-50 text-purple-700"
                              : update.type === "progress"
                                ? "bg-blue-50 text-blue-700"
                                : update.type === "launch"
                                  ? "bg-emerald-50 text-emerald-700"
                                  : "bg-amber-50 text-amber-700"
                          }
                        `}
                        >
                          <span class="mr-1.5">
                            {update.type === "milestone"
                              ? "🏆"
                              : update.type === "progress"
                                ? "📈"
                                : update.type === "launch"
                                  ? "🚀"
                                  : "💡"}
                          </span>
                          {update.type.charAt(0).toUpperCase() +
                            update.type.slice(1)}
                        </div>

                        {/* Date */}
                        <time class="text-sm text-gray-500">
                          {new Date(update.created_at).toLocaleDateString(
                            "en-US",
                            {
                              month: "short",
                              day: "numeric",
                              hour: "numeric",
                              minute: "2-digit",
                            }
                          )}
                        </time>
                      </div>

                      {/* Product Context - if exists */}
                      {update.product_id && (
                        <div class="flex items-center gap-2 text-sm text-gray-600">
                          <span class="font-medium text-gray-900">
                            {update.products.title}
                          </span>
                          <span>•</span>
                          <span>{update.products.month}</span>
                        </div>
                      )}
                    </div>

                    {/* Card Content */}
                    <div class="p-6">
                      <div class="prose prose-sm max-w-none">
                        <p class="text-gray-700 leading-relaxed whitespace-pre-wrap">
                          {update.content}
                        </p>
                      </div>

                      {/* Actions */}
                      <div class="mt-4 flex items-center justify-between">
                        {/* Engagement Stats */}
                        <div class="flex items-center gap-4 text-sm text-gray-500">
                          <button class="hover:text-gray-700 transition-colors inline-flex items-center gap-1">
                            <svg
                              class="w-4 h-4"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                              />
                            </svg>
                            {Math.floor(Math.random() * 10)} Likes
                          </button>
                          <button class="hover:text-gray-700 transition-colors inline-flex items-center gap-1">
                            <svg
                              class="w-4 h-4"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"
                              />
                            </svg>
                            Comment
                          </button>
                        </div>

                        {/* Owner Actions */}
                        {user && profile?.id === 1 && (
                          <div class="flex items-center gap-2">
                            <button class="p-1.5 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-lg transition-colors">
                              <svg
                                class="w-4 h-4"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                              >
                                <path
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"
                                />
                              </svg>
                            </button>
                            <button class="p-1.5 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded-lg transition-colors">
                              <svg
                                class="w-4 h-4"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                              >
                                <path
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                                />
                              </svg>
                            </button>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              ))
            }
          </div>

          {/* Load More */}
          {
            updates?.length >= 10 && (
              <div class="text-center mt-12">
                <button class="inline-flex items-center px-6 py-3 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 transition-colors">
                  Load More Updates
                  <svg
                    class="w-4 h-4 ml-2"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                </button>
              </div>
            )
          }
        </div>
      </div>
    </div>

    {/* Products Grid - Move below updates */}
    <div class="bg-white py-12 border-t border-gray-100">
      <div class="container mx-auto px-4">
        <h2 class="text-2xl font-bold text-gray-900 mb-8">Products Timeline</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {
            productGrid.map((product) => {
              const status =
                product.status || (product.id ? "completed" : "not_started");
              const isActive = status !== "not_started";
              const isCurrentMonth = product.month === currentMonth;

              return (
                <div
                  class={`
                  group bg-white rounded-xl overflow-hidden transition-all duration-300
                  ${isActive ? "hover:shadow-xl" : "opacity-75"}
                  ${isCurrentMonth ? "ring-2 ring-emerald-500" : ""}
                  border border-gray-100
                `}
                >
                  {/* Thumbnail or Placeholder */}
                  <div class="relative h-48 bg-gray-100">
                    {product.thumbnail_url ? (
                      <img
                        src={product.thumbnail_url}
                        alt={product.title}
                        class="w-full h-full object-cover"
                      />
                    ) : (
                      <div class="flex items-center justify-center h-full">
                        <span class="text-gray-400">
                          {status === "not_started"
                            ? "🚀 Coming Soon"
                            : "🏗️ Building"}
                        </span>
                      </div>
                    )}
                    <div class="absolute top-4 right-4 flex gap-2">
                      <span
                        class={`
                        px-2.5 py-1 rounded-full text-xs font-medium
                        ${
                          isCurrentMonth
                            ? "bg-emerald-100 text-emerald-700"
                            : isActive
                              ? "bg-emerald-50 text-emerald-600"
                              : "bg-gray-50 text-gray-500"
                        }
                      `}
                      >
                        {product.month}
                        {isCurrentMonth && <span class="ml-1">• Now</span>}
                      </span>
                    </div>
                  </div>

                  <div class="p-6">
                    {/* Status Badge */}
                    <div class="flex items-center gap-2 mb-4">
                      <div
                        class={`w-2 h-2 rounded-full ${getStatusConfig(status).dotColor}`}
                      />
                      <span
                        class={`text-xs ${getStatusConfig(status).textColor} font-medium`}
                      >
                        {getStatusConfig(status).label}
                      </span>
                    </div>

                    {/* Title and Description */}
                    <h3
                      class={`
                      text-xl font-semibold mb-2 transition-colors
                      ${isActive ? "text-gray-900" : "text-gray-400"}
                    `}
                    >
                      {product.title}
                    </h3>
                    {product.description && (
                      <p class="text-gray-600 text-sm mb-4">
                        {product.description}
                      </p>
                    )}

                    {/* Tech Stack Tags */}
                    {product.tech_stack && (
                      <div class="flex flex-wrap gap-2 mb-4">
                        {product.tech_stack.map((tech) => (
                          <span class="px-2 py-1 bg-gray-100 text-gray-600 rounded text-xs">
                            {tech}
                          </span>
                        ))}
                      </div>
                    )}

                    {/* Action Links */}
                    <div class="flex flex-wrap items-center gap-3 mt-4">
                      {status === "completed" && (
                        <>
                          <a
                            href={`/products/${product.id}`}
                            class="inline-flex items-center text-sm font-medium text-emerald-600 hover:text-emerald-700"
                          >
                            View Details
                            <svg
                              class="w-4 h-4 ml-1"
                              viewBox="0 0 20 20"
                              fill="currentColor"
                            >
                              <path
                                fill-rule="evenodd"
                                d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                                clip-rule="evenodd"
                              />
                            </svg>
                          </a>
                          {product.github_url && (
                            <a
                              href={product.github_url}
                              target="_blank"
                              rel="noopener noreferrer"
                              class="inline-flex items-center text-sm text-gray-500 hover:text-gray-700"
                            >
                              <svg
                                class="w-4 h-4 mr-1"
                                viewBox="0 0 24 24"
                                fill="currentColor"
                              >
                                <path d="M12 0C5.37 0 0 5.37 0 12c0 5.31 3.435 9.795 8.205 11.385.6.105.825-.255.825-.57 0-.285-.015-1.23-.015-2.235-3.015.555-3.795-.735-4.035-1.41-.135-.345-.72-1.41-1.23-1.695-.42-.225-1.02-.78-.015-.795.945-.015 1.62.87 1.845 1.23 1.08 1.815 2.805 1.305 3.495.99.105-.78.42-1.305.765-1.605-2.67-.3-5.46-1.335-5.46-5.925 0-1.305.465-2.385 1.23-3.225-.12-.3-.54-1.53.12-3.18 0 0 1.005-.315 3.3 1.23.96-.27 1.98-.405 3-.405s2.04.135 3 .405c2.295-1.56 3.3-1.23 3.3-1.23.66 1.65.24 2.88.12 3.18.765.84 1.23 1.905 1.23 3.225 0 4.605-2.805 5.625-5.475 5.925.435.375.81 1.095.81 2.22 0 1.605-.015 2.895-.015 3.3 0 .315.225.69.825.57A12.02 12.02 0 0024 12c0-6.63-5.37-12-12-12z" />
                              </svg>
                              Code
                            </a>
                          )}
                          {product.demo_url && (
                            <a
                              href={product.demo_url}
                              target="_blank"
                              rel="noopener noreferrer"
                              class="inline-flex items-center text-sm text-gray-500 hover:text-gray-700"
                            >
                              <svg
                                class="w-4 h-4 mr-1"
                                viewBox="0 0 24 24"
                                fill="none"
                                stroke="currentColor"
                              >
                                <path
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                                />
                                <path
                                  stroke-linecap="round"
                                  stroke-linejoin="round"
                                  stroke-width="2"
                                  d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"
                                />
                              </svg>
                              Demo
                            </a>
                          )}
                        </>
                      )}
                      {status === "in_progress" && (
                        <span class="inline-flex items-center text-sm font-medium text-amber-600">
                          <svg
                            class="w-4 h-4 mr-1.5 animate-spin"
                            viewBox="0 0 24 24"
                            fill="none"
                          >
                            <circle
                              class="opacity-25"
                              cx="12"
                              cy="12"
                              r="10"
                              stroke="currentColor"
                              stroke-width="4"
                            />
                            <path
                              class="opacity-75"
                              fill="currentColor"
                              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                            />
                          </svg>
                          Building
                        </span>
                      )}
                    </div>

                    {/* Lessons Learned - Only show for completed projects */}
                    {status === "completed" && product.lessons_learned && (
                      <div class="mt-4 pt-4 border-t border-gray-100">
                        <h4 class="text-sm font-medium text-gray-900 mb-2">
                          Lessons Learned
                        </h4>
                        <p class="text-sm text-gray-600 italic">
                          "{product.lessons_learned}"
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              );
            })
          }
        </div>
      </div>
    </div>
  </main>
  <Footer />
</Layout>
