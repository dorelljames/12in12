---
interface Props {
  productId: string;
}

const { productId } = Astro.props;
---

<div class="comments-section" data-product-id={productId}>
  {/* Comment Form */}
  <div class="mb-8">
    <h3 class="text-xl font-semibold text-slate-200 mb-4">Leave a Comment</h3>
    <form id="comment-form" class="space-y-4">
      <div>
        <textarea
          id="comment-content"
          name="content"
          rows="3"
          class="p-4 w-full rounded-lg bg-slate-800 border-slate-700 text-slate-200 placeholder-slate-400 focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
          placeholder="Share your thoughts..."></textarea>
      </div>
      <div class="flex justify-end">
        <button
          type="submit"
          class="px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 focus:ring-offset-slate-800 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          disabled
        >
          Post Comment
        </button>
      </div>
    </form>
  </div>

  {/* Comments List */}
  <div>
    <h3 class="text-xl font-semibold text-slate-200 mb-4">Comments</h3>
    <div id="comments-list" class="space-y-6">
      <div class="animate-pulse space-y-6">
        <div class="flex gap-4">
          <div class="w-10 h-10 bg-slate-700 rounded-full"></div>
          <div class="flex-1 space-y-2">
            <div class="h-4 bg-slate-700 rounded w-1/4"></div>
            <div class="h-4 bg-slate-700 rounded w-3/4"></div>
          </div>
        </div>
        <div class="flex gap-4">
          <div class="w-10 h-10 bg-slate-700 rounded-full"></div>
          <div class="flex-1 space-y-2">
            <div class="h-4 bg-slate-700 rounded w-1/4"></div>
            <div class="h-4 bg-slate-700 rounded w-3/4"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let isAuthenticated = false;
  let currentUserId: string | null = null;

  // Check authentication status
  const checkAuth = async () => {
    try {
      const response = await fetch("/api/auth/check", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.ok) {
        const data = await response.json();
        currentUserId = data.user.id;
        isAuthenticated = true;
        return true;
      }
      return false;
    } catch (error) {
      console.error("Error checking auth status:", error);
      return false;
    }
  };

  // Format date
  const formatDate = (date: string) => {
    return new Intl.DateTimeFormat("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
      hour: "numeric",
      minute: "2-digit",
    }).format(new Date(date));
  };

  // Render a single comment
  const renderComment = (comment: any) => {
    const isOwner = currentUserId === comment.profile_id;
    const editedText =
      comment.updated_at !== comment.created_at ? " (edited)" : "";

    return `
      <div class="comment-item group bg-slate-800/50 rounded-lg p-4 relative" data-comment-id="${comment.id}">
        <div class="flex items-start gap-4">
          ${
            comment.profiles.avatar_url
              ? `<img src="${comment.profiles.avatar_url}" alt="${comment.profiles.username}" class="w-10 h-10 rounded-full">`
              : `<div class="w-10 h-10 rounded-full bg-gradient-to-br from-primary-900 to-primary-800 flex items-center justify-center">
                  <span class="text-primary-200 text-sm">${comment.profiles.username?.[0]?.toUpperCase()}</span>
                </div>`
          }
          <div class="flex-1">
            <div class="flex items-center justify-between mb-1">
              <div>
                <span class="font-medium text-slate-200">${comment.profiles.full_name || comment.profiles.username}</span>
                <span class="text-sm text-slate-400 ml-2">${formatDate(comment.created_at)}${editedText}</span>
              </div>
              ${
                isOwner
                  ? `
                <div class="flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity absolute top-4 right-4">
                  <button class="edit-comment-btn text-sm text-slate-400 hover:text-slate-200 bg-slate-800/90 px-2 py-1 rounded">
                    <span class="flex items-center gap-1">
                      <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                      </svg>
                      Edit
                    </span>
                  </button>
                  <button class="delete-comment-btn text-sm text-red-400 hover:text-red-300 bg-slate-800/90 px-2 py-1 rounded">
                    <span class="flex items-center gap-1">
                      <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                      Delete
                    </span>
                  </button>
                </div>
              `
                  : ""
              }
            </div>
            <div class="comment-content text-slate-300">${comment.content}</div>
            ${
              isOwner
                ? `
              <form class="edit-comment-form mt-2" style="display: none;">
                <textarea
                  class="p-2 w-full rounded bg-slate-700 border-slate-600 text-slate-200 text-sm mb-2 focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                  rows="2"
                >${comment.content}</textarea>
                <div class="flex justify-end gap-2">
                  <button type="button" class="cancel-edit-btn px-3 py-1 text-sm text-slate-400 hover:text-slate-200">Cancel</button>
                  <button type="submit" class="px-3 py-1 bg-primary-600 text-white text-sm rounded hover:bg-primary-700">Save</button>
                </div>
              </form>
            `
                : ""
            }
          </div>
        </div>
      </div>
    `;
  };

  // Render comments list
  const renderComments = (comments: any[]) => {
    const commentsList = document.getElementById("comments-list");
    if (!commentsList) return;

    if (comments.length === 0) {
      commentsList.innerHTML = `
        <div class="text-center py-8">
          <p class="text-slate-400">No comments yet. Be the first to comment!</p>
        </div>
      `;
      return;
    }

    commentsList.innerHTML = comments.map(renderComment).join("");

    // Add event listeners for edit and delete buttons
    comments.forEach((comment) => {
      if (currentUserId === comment.profile_id) {
        const commentEl = commentsList.querySelector(
          `[data-comment-id="${comment.id}"]`
        );
        if (!commentEl) return;

        // Edit functionality
        const editBtn = commentEl.querySelector(".edit-comment-btn");
        const deleteBtn = commentEl.querySelector(".delete-comment-btn");
        const editForm = commentEl.querySelector(".edit-comment-form");
        const cancelBtn = commentEl.querySelector(".cancel-edit-btn");
        const contentEl = commentEl.querySelector(".comment-content");

        editBtn?.addEventListener("click", () => {
          (contentEl as HTMLElement).style.display = "none";
          (editForm as HTMLElement).style.display = "block";
          (editBtn as HTMLElement).style.display = "none";
        });

        cancelBtn?.addEventListener("click", () => {
          (contentEl as HTMLElement).style.display = "block";
          (editForm as HTMLElement).style.display = "none";
          (editBtn as HTMLElement).style.display = "inline";
        });

        // Handle edit form submission
        editForm?.addEventListener("submit", async (e) => {
          e.preventDefault();
          const textarea = editForm.querySelector("textarea");
          const newContent = textarea?.value.trim();

          if (!newContent) return;

          try {
            const response = await fetch("/api/comments", {
              method: "PATCH",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                commentId: comment.id,
                content: newContent,
              }),
            });

            if (response.ok) {
              const updatedComment = await response.json();
              commentEl.outerHTML = renderComment(updatedComment);
              // Reattach event listeners
              const updatedResponse = await fetch(
                `/api/comments?productId=${comment.product_id}`
              );
              const updatedComments = await updatedResponse.json();
              renderComments(updatedComments);
            }
          } catch (error) {
            console.error("Error updating comment:", error);
          }
        });

        // Handle delete
        deleteBtn?.addEventListener("click", async () => {
          if (!confirm("Are you sure you want to delete this comment?")) return;

          try {
            const response = await fetch(
              `/api/comments?commentId=${comment.id}`,
              {
                method: "DELETE",
              }
            );

            if (response.ok) {
              commentEl.remove();
              // If no comments left, show empty state
              if (commentsList.children.length === 0) {
                renderComments([]);
              }
            }
          } catch (error) {
            console.error("Error deleting comment:", error);
          }
        });
      }
    });
  };

  // Initialize comments
  const initializeComments = async () => {
    const commentsSection = document.querySelector(".comments-section");
    const productId = commentsSection?.getAttribute("data-product-id");
    const commentForm = document.getElementById("comment-form");
    const submitButton = commentForm?.querySelector(
      "button[type='submit']"
    ) as HTMLButtonElement | null;
    const textarea = document.getElementById(
      "comment-content"
    ) as HTMLTextAreaElement | null;

    if (!productId) return;

    // Check auth and update UI
    const isAuthed = await checkAuth();
    if (submitButton && textarea) {
      submitButton.disabled = !isAuthed;
      textarea.placeholder = isAuthed
        ? "Share your thoughts..."
        : "Please sign in to comment";
    }

    // Fetch initial comments
    try {
      const response = await fetch(`/api/comments?productId=${productId}`);
      const comments = await response.json();
      renderComments(comments);
    } catch (error) {
      console.error("Error fetching comments:", error);
    }

    // Handle form submission
    if (commentForm) {
      commentForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        if (!isAuthed) return;

        const submitButton = commentForm.querySelector(
          "button[type='submit']"
        ) as HTMLButtonElement;
        submitButton.disabled = true;
        submitButton.textContent = "Posting...";

        const formData = new FormData(e.target as HTMLFormElement);
        const content = formData.get("content");

        try {
          const response = await fetch("/api/comments", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              productId,
              content,
            }),
          });

          if (response.ok) {
            // Clear form and refresh comments
            (e.target as HTMLFormElement).reset();
            const updatedResponse = await fetch(
              `/api/comments?productId=${productId}`
            );
            const updatedComments = await updatedResponse.json();
            renderComments(updatedComments);
          }
        } catch (error) {
          console.error("Error posting comment:", error);
        } finally {
          submitButton.disabled = false;
          submitButton.textContent = "Post Comment";
        }
      });
    }
  };

  // Initialize on page load
  document.addEventListener("DOMContentLoaded", initializeComments);
</script>
