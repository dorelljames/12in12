---
interface Props {
  profileId: string;
  products: Array<{
    id: string;
    title: string;
    month: string;
    status: string;
  }>;
  update?: {
    id: string;
    type: "milestone" | "progress" | "launch" | "learning";
    content: string;
    product_id?: string;
  };
}

const { profileId, products, update } = Astro.props;

// Filter only in-progress and completed products
const activeProducts = products.filter(
  (p) => p.title && (p.status === "completed" || p.status === "in_progress")
);

const modalTitle = update ? "Edit Update" : "Share Update";
const submitButtonText = update ? "Save Changes" : "Share Update";
---

<div
  id="shareUpdateModal"
  class="hidden fixed inset-0 bg-gray-900/90 backdrop-blur-sm overflow-y-auto h-full w-full z-50"
>
  <div
    class="relative top-20 mx-auto p-5 border w-full max-w-md shadow-lg rounded-xl bg-gray-800 border-gray-700"
  >
    <div class="mt-3">
      <div class="flex justify-between items-center pb-3">
        <h3 class="text-lg leading-6 font-medium text-white">
          {modalTitle}
        </h3>
        <button
          id="closeModal"
          class="text-gray-400 hover:text-gray-200 transition-colors"
        >
          <svg
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <form id="updateForm" class="mt-2">
        <input type="hidden" name="profileId" value={profileId} />
        {update && <input type="hidden" name="id" value={update.id} />}
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-200 mb-2">
            Update Type
          </label>
          <select
            name="type"
            class="w-full px-3 py-2 bg-gray-900 border border-gray-700 rounded-lg shadow-sm text-gray-200 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500/50"
            required
          >
            <option value="progress" selected={update?.type === "progress"}
              >Progress Update üìà</option
            >
            <option value="milestone" selected={update?.type === "milestone"}
              >Milestone üèÜ</option
            >
            <option value="launch" selected={update?.type === "launch"}
              >Launch üöÄ</option
            >
            <option value="learning" selected={update?.type === "learning"}
              >Learning üí°</option
            >
          </select>
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-200 mb-2">
            Related Project (Optional)
          </label>
          <select
            name="productId"
            class="w-full px-3 py-2 bg-gray-900 border border-gray-700 rounded-lg shadow-sm text-gray-200 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500/50"
          >
            <option value="">Select a project</option>
            {
              activeProducts.map((product) => (
                <option
                  value={product.id}
                  selected={product.id === update?.product_id}
                >
                  {product.title} ({product.month})
                </option>
              ))
            }
          </select>
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-200 mb-2">
            Content
          </label>
          <textarea
            name="content"
            rows="4"
            class="w-full px-3 py-2 bg-gray-900 border border-gray-700 rounded-lg shadow-sm text-gray-200 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500/50"
            placeholder="Share your progress, milestone, or learning..."
            required>{update?.content}</textarea
          >
        </div>
        <div class="flex justify-between gap-3">
          <button
            type="button"
            id="deleteButton"
            class="hidden px-4 py-2 text-sm font-medium text-red-300 bg-red-900/50 border border-red-700/50 rounded-lg hover:bg-red-900 hover:text-red-200 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-red-500/50 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <span id="deleteButtonText">Delete Update</span>
          </button>
          <div class="flex gap-3">
            <button
              type="button"
              id="cancelButton"
              class="px-4 py-2 text-sm font-medium text-gray-300 bg-gray-900 border border-gray-700 rounded-lg hover:bg-gray-800 hover:text-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-emerald-500/50"
            >
              Cancel
            </button>
            <button
              type="submit"
              id="submitUpdateButton"
              class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-emerald-600 border border-transparent rounded-lg hover:bg-emerald-700 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-emerald-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span id="submitButtonText">{submitButtonText}</span>
              <svg
                id="submitSpinner"
                class="hidden w-4 h-4 ml-2 animate-spin"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  class="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"></circle>
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  const modal = document.getElementById("shareUpdateModal");
  const closeButton = document.getElementById("closeModal");
  const cancelButton = document.getElementById("cancelButton");
  const deleteButton = document.getElementById(
    "deleteButton"
  ) as HTMLButtonElement;
  const deleteButtonText = document.getElementById("deleteButtonText");
  const updateForm = document.getElementById("updateForm") as HTMLFormElement;
  const submitButton = document.getElementById(
    "submitUpdateButton"
  ) as HTMLButtonElement;
  const submitButtonText = document.getElementById("submitButtonText");
  const submitSpinner = document.getElementById("submitSpinner");

  function setLoading(
    isLoading: boolean,
    action: "create" | "update" | "delete" = "create"
  ) {
    if (
      submitButton &&
      submitButtonText &&
      submitSpinner &&
      deleteButton &&
      deleteButtonText
    ) {
      submitButton.disabled = isLoading;
      deleteButton.disabled = isLoading;
      submitSpinner.classList.toggle("hidden", !isLoading);

      if (isLoading) {
        if (action === "delete") {
          deleteButtonText.textContent = "Deleting...";
        } else {
          submitButtonText.textContent =
            action === "create" ? "Sharing..." : "Saving...";
        }
      } else {
        deleteButtonText.textContent = "Delete Update";
        submitButtonText.textContent =
          action === "create" ? "Share Update" : "Save Changes";
      }
    }
  }

  function showModal() {
    modal?.classList.remove("hidden");
  }

  function hideModal() {
    modal?.classList.add("hidden");
    // Reset form and loading state when hiding
    updateForm?.reset();
    setLoading(false);
    // Hide delete button when closing
    if (deleteButton) {
      deleteButton.classList.add("hidden");
    }
  }

  // Function to show modal for editing
  window.showEditModal = (updateData) => {
    if (updateForm) {
      const typeSelect = updateForm.querySelector(
        '[name="type"]'
      ) as HTMLSelectElement;
      const productSelect = updateForm.querySelector(
        '[name="productId"]'
      ) as HTMLSelectElement;
      const contentTextarea = updateForm.querySelector(
        '[name="content"]'
      ) as HTMLTextAreaElement;
      const idInput = document.createElement("input");

      idInput.type = "hidden";
      idInput.name = "id";
      idInput.value = updateData.id;
      updateForm.appendChild(idInput);

      if (typeSelect) typeSelect.value = updateData.type;
      if (productSelect) productSelect.value = updateData.product_id || "";
      if (contentTextarea) contentTextarea.value = updateData.content;

      // Show delete button when editing
      if (deleteButton) {
        deleteButton.classList.remove("hidden");
      }

      setLoading(false, "update");
    }
    showModal();
  };

  closeButton?.addEventListener("click", hideModal);
  cancelButton?.addEventListener("click", hideModal);

  // Share update button handlers
  const shareUpdateButtons = document.querySelectorAll(
    "#shareUpdateButton, #shareUpdateButton2"
  );
  shareUpdateButtons.forEach((button) => {
    button.addEventListener("click", () => {
      setLoading(false, "create");
      showModal();
    });
  });

  // Delete button handler
  deleteButton?.addEventListener("click", async () => {
    const idInput = updateForm?.querySelector(
      '[name="id"]'
    ) as HTMLInputElement;
    if (!idInput?.value) return;

    if (
      !confirm(
        "Are you sure you want to delete this update? This action cannot be undone."
      )
    ) {
      return;
    }

    try {
      setLoading(true, "delete");

      const response = await fetch(`/api/updates/${idInput.value}`, {
        method: "DELETE",
      });

      if (response.ok) {
        hideModal();
        window.location.reload();
      } else {
        let errorMessage = "Failed to delete update";

        // Only try to parse JSON if the content type is application/json
        const contentType = response.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
          const errorData = await response.json();
          errorMessage = errorData.error || errorMessage;
        } else if (response.status === 401) {
          // If we got redirected to login page
          window.location.href = "/signin";
          return;
        }

        throw new Error(errorMessage);
      }
    } catch (error: unknown) {
      console.error("Error:", error);
      if (error instanceof Error) {
        alert(error.message);
      } else {
        alert("An unexpected error occurred");
      }
      setLoading(false, "delete");
    }
  });

  updateForm?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(updateForm);
    const data = Object.fromEntries(formData);

    // Remove productId if not selected
    if (!data.productId) {
      delete data.productId;
    }

    const isEdit = !!data.id;
    const endpoint = isEdit ? `/api/updates/${data.id}` : "/api/updates";
    const method = isEdit ? "PUT" : "POST";

    try {
      setLoading(true, isEdit ? "update" : "create");

      const response = await fetch(endpoint, {
        method,
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        hideModal();
        window.location.reload();
      } else {
        const errorData = await response.json();
        throw new Error(
          errorData.error ||
            (isEdit ? "Failed to update" : "Failed to share update")
        );
      }
    } catch (error: unknown) {
      console.error("Error:", error);
      if (error instanceof Error) {
        alert(error.message);
      } else {
        alert("An unexpected error occurred");
      }
      setLoading(false, isEdit ? "update" : "create");
    }
  });

  // Declare the showEditModal function type for TypeScript
  declare global {
    interface Window {
      showEditModal: (updateData: any) => void;
    }
  }
</script>
