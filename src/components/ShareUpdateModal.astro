---
interface Props {
  profileId: string;
  products: Array<{
    id: string;
    title: string;
    month: string;
    status: string;
  }>;
  update?: {
    id: string;
    type: "milestone" | "progress" | "launch" | "learning";
    content: string;
    product_id?: string;
  };
}

const { profileId, products, update } = Astro.props;

// Filter only in-progress and completed products
const activeProducts = products.filter(
  (p) => p.status === "completed" || p.status === "in_progress"
);

const modalTitle = update ? "Edit Update" : "Share Update";
const submitButtonText = update ? "Save Changes" : "Share Update";
---

<div
  id="shareUpdateModal"
  class="hidden fixed inset-0 bg-gray-900/90 backdrop-blur-sm overflow-y-auto h-full w-full z-50"
>
  <div
    class="relative top-20 mx-auto p-5 border w-full max-w-md shadow-lg rounded-xl bg-gray-800 border-gray-700"
  >
    <div class="mt-3">
      <div class="flex justify-between items-center pb-3">
        <h3 class="text-lg leading-6 font-medium text-white">
          {modalTitle}
        </h3>
        <button
          id="closeModal"
          class="text-gray-400 hover:text-gray-200 transition-colors"
        >
          <svg
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <form id="updateForm" class="mt-2">
        <input type="hidden" name="profileId" value={profileId} />
        {update && <input type="hidden" name="id" value={update.id} />}
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-200 mb-2">
            Update Type
          </label>
          <select
            name="type"
            class="w-full px-3 py-2 bg-gray-900 border border-gray-700 rounded-lg shadow-sm text-gray-200 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500/50"
            required
          >
            <option value="progress" selected={update?.type === "progress"}
              >Progress Update 📈</option
            >
            <option value="milestone" selected={update?.type === "milestone"}
              >Milestone 🏆</option
            >
            <option value="launch" selected={update?.type === "launch"}
              >Launch 🚀</option
            >
            <option value="learning" selected={update?.type === "learning"}
              >Learning 💡</option
            >
          </select>
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-200 mb-2">
            Related Project (Optional)
          </label>
          <select
            name="productId"
            class="w-full px-3 py-2 bg-gray-900 border border-gray-700 rounded-lg shadow-sm text-gray-200 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500/50"
          >
            <option value="">Select a project</option>
            {
              activeProducts.map((product) => (
                <option
                  value={product.id}
                  selected={product.id === update?.product_id}
                >
                  {product.title} ({product.month})
                </option>
              ))
            }
          </select>
        </div>
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-200 mb-2">
            Content
          </label>
          <textarea
            name="content"
            rows="4"
            class="w-full px-3 py-2 bg-gray-900 border border-gray-700 rounded-lg shadow-sm text-gray-200 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500/50"
            placeholder="Share your progress, milestone, or learning..."
            required>{update?.content}</textarea
          >
        </div>
        <div class="flex justify-end gap-3">
          <button
            type="button"
            id="cancelButton"
            class="px-4 py-2 text-sm font-medium text-gray-300 bg-gray-900 border border-gray-700 rounded-lg hover:bg-gray-800 hover:text-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-emerald-500/50"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 text-sm font-medium text-white bg-emerald-600 border border-transparent rounded-lg hover:bg-emerald-700 transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-emerald-500"
          >
            {submitButtonText}
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  const modal = document.getElementById("shareUpdateModal");
  const closeButton = document.getElementById("closeModal");
  const cancelButton = document.getElementById("cancelButton");
  const updateForm = document.getElementById("updateForm") as HTMLFormElement;

  function showModal() {
    modal?.classList.remove("hidden");
  }

  function hideModal() {
    modal?.classList.add("hidden");
    // Reset form when hiding
    updateForm?.reset();
  }

  // Function to show modal for editing
  window.showEditModal = (updateData) => {
    if (updateForm) {
      const typeSelect = updateForm.querySelector(
        '[name="type"]'
      ) as HTMLSelectElement;
      const productSelect = updateForm.querySelector(
        '[name="productId"]'
      ) as HTMLSelectElement;
      const contentTextarea = updateForm.querySelector(
        '[name="content"]'
      ) as HTMLTextAreaElement;
      const idInput = document.createElement("input");

      idInput.type = "hidden";
      idInput.name = "id";
      idInput.value = updateData.id;
      updateForm.appendChild(idInput);

      if (typeSelect) typeSelect.value = updateData.type;
      if (productSelect) productSelect.value = updateData.product_id || "";
      if (contentTextarea) contentTextarea.value = updateData.content;
    }
    showModal();
  };

  closeButton?.addEventListener("click", hideModal);
  cancelButton?.addEventListener("click", hideModal);

  updateForm?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(updateForm);
    const data = Object.fromEntries(formData);

    // Remove productId if not selected
    if (!data.productId) {
      delete data.productId;
    }

    const isEdit = !!data.id;
    const endpoint = isEdit ? `/api/updates/${data.id}` : "/api/updates";
    const method = isEdit ? "PUT" : "POST";

    try {
      const response = await fetch(endpoint, {
        method,
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        hideModal();
        window.location.reload();
      } else {
        const errorData = await response.json();
        throw new Error(
          errorData.error ||
            (isEdit ? "Failed to update" : "Failed to share update")
        );
      }
    } catch (error: unknown) {
      console.error("Error:", error);
      if (error instanceof Error) {
        alert(error.message);
      } else {
        alert("An unexpected error occurred");
      }
    }
  });

  // Declare the showEditModal function type for TypeScript
  declare global {
    interface Window {
      showEditModal: (updateData: any) => void;
    }
  }
</script>
