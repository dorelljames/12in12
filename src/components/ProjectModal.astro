---
interface Props {
  profileId: string;
  project?: {
    id?: string;
    title?: string;
    description?: string;
    status?: "completed" | "in_progress" | "not_started";
    github_url?: string;
    demo_url?: string;
    tech_stack?: string[];
    lessons_learned?: string;
    thumbnail_url?: string;
  };
  month?: string;
}

const { profileId, project, month = "" } = Astro.props;
const modalTitle = project?.id ? "Edit Project" : "New Project";
const submitButtonText = project?.id ? "Save Changes" : "Create Project";
---

<div
  id="projectModal"
  class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50"
>
  <div
    class="relative top-20 mx-auto p-5 border w-full max-w-2xl shadow-lg rounded-md bg-white"
  >
    <div class="mt-3">
      <div class="flex justify-between items-center pb-3">
        <h3 class="text-lg leading-6 font-medium text-gray-900">
          {modalTitle} - {month}
        </h3>
        <button
          id="closeProjectModal"
          class="text-gray-400 hover:text-gray-500"
        >
          <svg
            class="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <form id="projectForm" class="mt-2">
        <input type="hidden" name="profileId" value={profileId} />
        <input type="hidden" name="month" value={month} />
        {project?.id && <input type="hidden" name="id" value={project.id} />}

        <div class="grid grid-cols-1 gap-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Project Title
            </label>
            <input
              type="text"
              name="title"
              value={project?.title}
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-emerald-500 focus:border-emerald-500"
              required
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Description
            </label>
            <textarea
              name="description"
              rows="3"
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-emerald-500 focus:border-emerald-500"
              placeholder="What are you building?"
              required>{project?.description}</textarea
            >
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Status
            </label>
            <select
              name="status"
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-emerald-500 focus:border-emerald-500"
              required
            >
              <option
                value="not_started"
                selected={project?.status === "not_started"}>Not Started</option
              >
              <option
                value="in_progress"
                selected={project?.status === "in_progress"}>In Progress</option
              >
              <option
                value="completed"
                selected={project?.status === "completed"}>Completed</option
              >
            </select>
          </div>

          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                GitHub URL
              </label>
              <input
                type="url"
                name="github_url"
                value={project?.github_url}
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-emerald-500 focus:border-emerald-500"
                placeholder="https://github.com/..."
              />
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                Demo URL
              </label>
              <input
                type="url"
                name="demo_url"
                value={project?.demo_url}
                class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-emerald-500 focus:border-emerald-500"
                placeholder="https://..."
              />
            </div>
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Tech Stack (comma-separated)
            </label>
            <input
              type="text"
              name="tech_stack"
              value={project?.tech_stack?.join(", ")}
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-emerald-500 focus:border-emerald-500"
              placeholder="React, TypeScript, Tailwind CSS"
            />
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Lessons Learned
            </label>
            <textarea
              name="lessons_learned"
              rows="3"
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-emerald-500 focus:border-emerald-500"
              placeholder="What did you learn from this project?"
              >{project?.lessons_learned}</textarea
            >
          </div>

          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Thumbnail URL
            </label>
            <input
              type="url"
              name="thumbnail_url"
              value={project?.thumbnail_url}
              class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-emerald-500 focus:border-emerald-500"
              placeholder="https://..."
            />
          </div>
        </div>

        <div class="flex justify-end gap-3 mt-6">
          <button
            type="button"
            id="cancelProjectButton"
            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 text-sm font-medium text-white bg-emerald-600 border border-transparent rounded-md hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500"
          >
            {submitButtonText}
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  const modal = document.getElementById("projectModal");
  const closeButton = document.getElementById("closeProjectModal");
  const cancelButton = document.getElementById("cancelProjectButton");
  const projectForm = document.getElementById("projectForm") as HTMLFormElement;

  function showModal() {
    modal?.classList.remove("hidden");
  }

  function hideModal() {
    modal?.classList.add("hidden");
    // Reset form when hiding
    projectForm?.reset();
  }

  // Function to show modal for editing
  window.showProjectModal = (projectData) => {
    if (projectForm) {
      const titleInput = projectForm.querySelector(
        '[name="title"]'
      ) as HTMLInputElement;
      const descriptionTextarea = projectForm.querySelector(
        '[name="description"]'
      ) as HTMLTextAreaElement;
      const statusSelect = projectForm.querySelector(
        '[name="status"]'
      ) as HTMLSelectElement;
      const githubInput = projectForm.querySelector(
        '[name="github_url"]'
      ) as HTMLInputElement;
      const demoInput = projectForm.querySelector(
        '[name="demo_url"]'
      ) as HTMLInputElement;
      const techStackInput = projectForm.querySelector(
        '[name="tech_stack"]'
      ) as HTMLInputElement;
      const lessonsTextarea = projectForm.querySelector(
        '[name="lessons_learned"]'
      ) as HTMLTextAreaElement;
      const thumbnailInput = projectForm.querySelector(
        '[name="thumbnail_url"]'
      ) as HTMLInputElement;
      const monthInput = projectForm.querySelector(
        '[name="month"]'
      ) as HTMLInputElement;

      // Create or update id input
      let idInput = projectForm.querySelector(
        '[name="id"]'
      ) as HTMLInputElement;
      if (projectData.id && !idInput) {
        idInput = document.createElement("input");
        idInput.type = "hidden";
        idInput.name = "id";
        projectForm.appendChild(idInput);
      }

      if (projectData.id) idInput.value = projectData.id;
      if (titleInput) titleInput.value = projectData.title || "";
      if (descriptionTextarea)
        descriptionTextarea.value = projectData.description || "";
      if (statusSelect)
        statusSelect.value = projectData.status || "not_started";
      if (githubInput) githubInput.value = projectData.github_url || "";
      if (demoInput) demoInput.value = projectData.demo_url || "";
      if (techStackInput)
        techStackInput.value = projectData.tech_stack?.join(", ") || "";
      if (lessonsTextarea)
        lessonsTextarea.value = projectData.lessons_learned || "";
      if (thumbnailInput)
        thumbnailInput.value = projectData.thumbnail_url || "";
      if (monthInput) monthInput.value = projectData.month;
    }
    showModal();
  };

  closeButton?.addEventListener("click", hideModal);
  cancelButton?.addEventListener("click", hideModal);

  projectForm?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(projectForm);
    const data: Record<string, any> = {};

    // Convert FormData to a properly typed object
    formData.forEach((value, key) => {
      data[key] = value;
    });

    // Process tech stack - ensure it's always an array
    const techStackString = String(data.tech_stack || "").trim();
    data.tech_stack = techStackString
      ? techStackString
          .split(",")
          .map((tech) => tech.trim())
          .filter(Boolean)
      : [];

    // Remove empty optional fields
    ["github_url", "demo_url", "lessons_learned", "thumbnail_url"].forEach(
      (field) => {
        if (!data[field]) delete data[field];
      }
    );

    const isEdit = !!data.id;
    const endpoint = isEdit ? `/api/projects/${data.id}` : "/api/projects";
    const method = isEdit ? "PUT" : "POST";

    try {
      const response = await fetch(endpoint, {
        method,
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        hideModal();
        window.location.reload();
      } else {
        const errorData = await response.json();
        throw new Error(
          errorData.error ||
            (isEdit ? "Failed to update project" : "Failed to create project")
        );
      }
    } catch (error: unknown) {
      console.error("Error:", error);
      if (error instanceof Error) {
        alert(error.message);
      } else {
        alert("An unexpected error occurred");
      }
    }
  });

  // Declare the showProjectModal function type for TypeScript
  declare global {
    interface Window {
      showProjectModal: (projectData: any) => void;
    }
  }
</script>
